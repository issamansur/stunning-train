using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        // Операторы и структуры данных
        int[] numbers = { 1, 2, 3, 4, 5 };
        int[] squaredNumbers = numbers.Select(x => x * x).ToArray();
        int[] evenNumbers = numbers.Where(x => x % 2 == 0).ToArray();

        // Множества (HashSet)
        HashSet<int> mySet = new HashSet<int> { 1, 2, 3, 4, 5 };
        mySet.Add(6);
        mySet.Remove(3);

        // Интерфейс IEnumerable и yield
        IEnumerable<int> MyGenerator(int n)
        {
            for (int i = 0; i < n; i++)
            {
                yield return i;
            }
        }

        var gen = MyGenerator(3);
        foreach (var value in gen)
        {
            Console.WriteLine(value);
        }

        // Итераторы
        List<int> myList = new List<int> { 1, 2, 3, 4, 5 };
        var myIterator = myList.GetEnumerator();
        myIterator.MoveNext();
        var nextValue = myIterator.Current;

        // Функциональное программирование (LINQ)
        List<int> myList = new List<int> { 1, 2, 3, 4, 5 };
        int sumResult = myList.Aggregate((x, y) => x + y);

        // Модули и импорты
        double sqrt = Math.Sqrt(25);

        // Обработка ошибок и исключений
        try
        {
            double result = 10 / 0;
        }
        catch (DivideByZeroException)
        {
            string result = "Деление на ноль!";
        }

        // Генераторы исключений
        double Divide(int x, int y)
        {
            if (y == 0)
            {
                throw new ArgumentException("Деление на ноль!");
            }
            return (double)x / y;
        }

        // Работа с файлами
        string content;
        using (StreamReader reader = new StreamReader("example.txt"))
        {
            content = reader.ReadToEnd();
        }

        // Контекстные менеджеры
        using (MyContext context = new MyContext())
        {
            Console.WriteLine("Внутри контекста");
        }

        // Декораторы
        void MyDecorator(Action<string> func)
        {
            Console.WriteLine("До вызова функции");
            func("Alice");
            Console.WriteLine("После вызова функции");
        }

        MyDecorator(name => Console.WriteLine($"Привет, {name}!"));
    }
}

class MyContext : IDisposable
{
    public void Dispose()
    {
        Console.WriteLine("Выход из контекста");
    }
}

using System;
using System.Collections.Generic;
using System.Threading.Tasks;

// Асинхронность и задачи (async/await)
class AsyncExample
{
    async Task<int> GetValueAsync()
    {
        await Task.Delay(1000);
        return 42;
    }

    async Task MainAsync()
    {
        int result = await GetValueAsync();
        Console.WriteLine($"Асинхронный результат: {result}");
    }
}

// Определение пользовательских классов
class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }

    public override string ToString()
    {
        return $"{FirstName} {LastName}";
    }
}

// Использование ссылок и референсов
class RefExample
{
    void ModifyValue(ref int x)
    {
        x = 10;
    }

    void Main()
    {
        int value = 5;
        ModifyValue(ref value);
        Console.WriteLine($"Модифицированное значение: {value}");
    }
}

// Наследование и переопределение методов
class Shape
{
    public virtual double Area()
    {
        return 0.0;
    }
}

class Circle : Shape
{
    public double Radius { get; set; }

    public Circle(double radius)
    {
        Radius = radius;
    }

    public override double Area()
    {
        return Math.PI * Radius * Radius;
    }
}

class Rectangle : Shape
{
    public double Width { get; set; }
    public double Height { get; set; }

    public Rectangle(double width, double height)
    {
        Width = width;
        Height = height;
    }

    public override double Area()
    {
        return Width * Height;
    }
}

class Program
{
    static void Main()
    {
        // Пример асинхронности
        AsyncExample asyncExample = new AsyncExample();
        asyncExample.MainAsync().GetAwaiter().GetResult();

        // Пример работы с классами
        Person person = new Person { FirstName = "Alice", LastName = "Johnson" };
        Console.WriteLine(person);

        // Пример ссылок и референсов
        RefExample refExample = new RefExample();
        refExample.Main();

        // Пример наследования и переопределения методов
        Shape circle = new Circle(5.0);
        Shape rectangle = new Rectangle(4.0, 6.0);

        Console.WriteLine($"Площадь круга: {circle.Area()}");
        Console.WriteLine($"Площадь прямоугольника: {rectangle.Area()}");
    }
}

// Класс с модификатором доступа public
public class PublicClass
{
    public int PublicField;
    public void PublicMethod() { }
}

// Класс с модификатором доступа internal (по умолчанию)
class InternalClass
{
    internal int InternalField;
    internal void InternalMethod() { }
}

// Класс с модификатором доступа private
class PrivateClass
{
    private int PrivateField;
    private void PrivateMethod() { }
}

// Абстрактный класс
public abstract class AbstractClass
{
    public abstract void AbstractMethod();
}

// Статический класс
public static class StaticClass
{
    public static int StaticField;
    public static void StaticMethod() { }
}

// Герметичный класс
sealed class SealedClass
{
    public int SealedField;
    public void SealedMethod() { }
}

// Класс с вложенными классами
public class OuterClass
{
    public int OuterField;
    public void OuterMethod() { }

    // Вложенный класс
    public class NestedClass
    {
        public int NestedField;
        public void NestedMethod() { }
    }

    // Вложенный статический класс
    public static class StaticNestedClass
    {
        public static int StaticNestedField;
        public static void StaticNestedMethod() { }
    }
}

class Program
{
    static void Main()
    {
        // Создание экземпляров классов и вызов методов
        PublicClass publicInstance = new PublicClass();
        publicInstance.PublicField = 1;
        publicInstance.PublicMethod();

        InternalClass internalInstance = new InternalClass();
        internalInstance.InternalField = 2;
        internalInstance.InternalMethod();

        PrivateClass privateInstance = new PrivateClass();
        // Нельзя обратиться к private-членам извне класса

        StaticClass.StaticField = 3;
        StaticClass.StaticMethod();

        SealedClass sealedInstance = new SealedClass();
        sealedInstance.SealedField = 4;
        sealedInstance.SealedMethod();

        OuterClass outerInstance = new OuterClass();
        outerInstance.OuterField = 5;
        outerInstance.OuterMethod();

        OuterClass.NestedClass nestedInstance = new OuterClass.NestedClass();
        nestedInstance.NestedField = 6;
        nestedInstance.NestedMethod();

        OuterClass.StaticNestedClass staticNestedInstance = new OuterClass.StaticNestedClass();
        OuterClass.StaticNestedClass.StaticNestedField = 7;
        OuterClass.StaticNestedClass.StaticNestedMethod();
    }
}

// Интерфейс
public interface IMyInterface
{
    void InterfaceMethod();
}

// Интерфейс с методами и свойствами
public interface IMyInterfaceWithProperties
{
    int InterfaceProperty { get; set; }
    void InterfaceMethod();
}

// Реализация интерфейса
public class InterfaceImplementation : IMyInterface
{
    public void InterfaceMethod()
    {
        Console.WriteLine("InterfaceImplementation.InterfaceMethod()");
    }
}

// Реализация интерфейса с методами и свойствами
public class InterfaceWithPropertiesImplementation : IMyInterfaceWithProperties
{
    public int InterfaceProperty { get; set; }

    public void InterfaceMethod()
    {
        Console.WriteLine("InterfaceWithPropertiesImplementation.InterfaceMethod()");
    }
}

class Program
{
    static void Main()
    {
        // Создание экземпляров классов и вызов методов
        InterfaceImplementation interfaceInstance = new InterfaceImplementation();
        interfaceInstance.InterfaceMethod();

        InterfaceWithPropertiesImplementation interfaceWithPropertiesInstance = new InterfaceWithPropertiesImplementation();
        interfaceWithPropertiesInstance.InterfaceMethod();
        interfaceWithPropertiesInstance.InterfaceProperty = 42;
    }
}