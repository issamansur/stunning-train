import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'My Angular App';
}

import { Injectable } from '@angular/core';

@Injectable()
export class MyService {
  getData() {
    return 'Данные от службы';
  }
}

@Component({
  selector: 'app-root',
  template: '<div>{{ data }}</div>'
})
export class AppComponent {
  data: string;

  constructor(private myService: MyService) {
    this.data = myService.getData();
  }
}

import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'about', component: AboutComponent },
  { path: 'contact', component: ContactComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

import { HttpClient } from '@angular/common/http';

@Injectable()
export class DataService {
  constructor(private http: HttpClient) { }

  fetchData() {
    return this.http.get('https://api.example.com/data');
  }
}

import { Injectable } from '@angular/core';

@Injectable()
export class DataService {
  private data: string[] = ['Item 1', 'Item 2', 'Item 3'];

  getData(): string[] {
    return this.data;
  }

  addData(item: string) {
    this.data.push(item);
  }
}

import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-item-list',
  template: `

  `
})
export class ItemListComponent {
  @Input() items: string[];
  @Output() itemAdded = new EventEmitter<string>();

  addItem(item: string) {
    this.itemAdded.emit(item);
  }
}

export interface Todo {
  id: number;
  text: string;
  completed: boolean;
}

import { Injectable } from '@angular/core';
import {
  HttpEvent,
  HttpInterceptor,
  HttpHandler,
  HttpRequest,
} from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  intercept(
    req: HttpRequest<any>,
    next: HttpHandler
  ): Observable<HttpEvent<any>> {
    const authToken = 'Bearer ' + localStorage.getItem('token');

    const authReq = req.clone({
      setHeaders: {
        Authorization: authToken,
      },
    });

    return next.handle(authReq);
  }
}

import { ActivatedRoute } from '@angular/router';

constructor(private route: ActivatedRoute) {}

ngOnInit() {
  this.route.paramMap.subscribe((params) => {
    const id = +params.get('id');
  });
}